<?xml version="1.0" encoding="UTF-8"?>
<!-- 日志级别:TRACE < DEBUG < INFO < WARN < ERROR < FATAL -->
<!--每个类里面都需要生成Logger的实例：
    LoggerFactory.getLogger(OpenRegisterController.class)
    LoggerFactory.getLogger("logger name")-->
<!-- scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文档是否有修改的时间间隔。默认单位是毫秒，默认的时间间隔为1分钟。 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="10 seconds" debug="false">
    <contextName>logback-local</contextName>
    <!--自定义的属性-->
    <property name="logPath" value="/data/logs/util/"/>
    <!--日志颜色渲染-->
    <conversionRule conversionWord="clr"
                    converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p})
	%clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint}
	%m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--控制台輸出-->
    <appender name="forConsole" class="ch.qos.logback.core.ConsoleAppender">
        <!--日志级别，需配合logger使用-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>trace</level>
        </filter>
        <!--日志格式-->
        <encoder>
            <pattern>
                [%-5p] %d{yyyy-MM-dd HH:mm:ss:SSS} %-10t: %m%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 文件輸出 -->
    <appender name="forFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--过滤器，下面配置为过滤出info级别的日志-->
        <!--<filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>info</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>-->

        <!--日志是否被追加到文件结尾，默认为true-->
        <append>true</append>
        <!--日志格式-->
        <encoder>
            <pattern>
                [%-5p] %d{yyyy-MM-dd HH:mm:ss:SSS} %-10t: %m%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--日志滚动策略,大小、日期-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--日志文件名称-->
            <fileNamePattern>${logPath}/util_%d{yyyyMMdd}.%i.log</fileNamePattern>
            <!--大小，名称需要加上 %i -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>300MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--天数-->
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <!--是否为安全写入模式，为ture则日志会被安全的写入文件，即使其他FileAppender同时做写入操作效率低。
        默认为false-->
        <prudent>true</prudent>
    </appender>

    <!-- 配置不同类输出到不同日志文件中，和上面的文件输出一样只是name不同，配置的logger元素不同，
    获取日志对象时通过getLogger("login")来获取-->
    <appender name="forFile_register" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <encoder>
            <pattern>
                [%-5p] %d{yyyy-MM-dd HH:mm:ss:SSS} %-10t: %m%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/register/iot_register_%d{yyyyMMdd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>300MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <prudent>true</prudent>
    </appender>

    <!-- 配置不同类输出到不同日志文件中，和上面的文件输出一样只是name不同，配置的logger元素不同-->
    <appender name="forFile_login" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <append>true</append>
        <encoder>
            <pattern>
                [%-5p] %d{yyyy-MM-dd HH:mm:ss:SSS} %-10t: %m%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logPath}/login/iot_login_%d{yyyyMMdd}.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>300MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>15</maxHistory>
        </rollingPolicy>
        <prudent>true</prudent>
    </appender>

    <!--loger元素，用来设置某一个包或者具体的某一个类的日志打印级别，以及指定<appender>。
        addtivity:是否向上级logger传递打印信息。默认是true-->
    <logger name="com" level="trace" additivity="true"></logger>
    <logger name="org.springframework" level="info" additivity="true"></logger>
    <logger name="org.hibernate" level="WARN" additivity="true"></logger>
    <logger name="ch.qos.logback" level="WARN" additivity="true"></logger>
    <logger name="org.apache.http" level="WARN" additivity="true"></logger>
    <logger name="com.netflix.discovery" level="WARN" additivity="true"></logger>
    <logger name="org.apache.shiro" level="WARN" additivity="true"></logger>
    <logger name="freemarker" level="INFO" additivity="true"></logger>
    <logger name="druid.sql.ResultSet" level="INFO" additivity="true"></logger>
    <!--将定义的输出到不同日志文件的appender放入logger元素中，分文件输出日志时必须配置此项，
    获取日志对象时通过getLogger("logger name")来获取-->
    <logger name="login" level="INFO" additivity="false">
        <appender-ref ref="forFile_login" />
    </logger>
    <logger name="register" level="INFO" additivity="false">
        <appender-ref ref="forFile_register" />
    </logger>


    <!--根loger元素，用来指定最基础的日志输出级别，只有一个level属性。
        可以包含零个或多个元素，标识这个appender将会添加到这个logger-->
    <root level="info">
        <appender-ref ref="forConsole"/>
        <appender-ref ref="forFile"/>
    </root>

</configuration>